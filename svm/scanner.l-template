/* SVM assembly file scanner.

   Copyright (C) 2012 Universit√© Paris 13
   Written by Luca Saiu

   This file is part of GNU epsilon.

   GNU epsilon is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   GNU epsilon is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GNU epsilon.  If not, see <http://www.gnu.org/licenses/>. */


%{

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdbool.h>
#include "../utility/utility.h"
#include "svm.h"
#include "parser.h" // generated by Bison

/* This is just to silence a couple of harmless warnings: */
//static void yyunput(int c, register char * yy_bp) __attribute__(( unused ));
//static int input(void) __attribute__(( unused ));
static void yyunput() __attribute__(( unused ));
static int input() __attribute__(( unused ));
%}

%option yylineno
%option noyywrap

DIGIT        [0-9]
SIGN         \+|\-
UNSIGNED_DECIMAL {DIGIT}+
DECIMAL      {SIGN}?{UNSIGNED_DECIMAL}
OCTAL        0[0-7]+
HEXADECIMAL  0x([0-9]|[A-F]|[a-f])+
BINARY       0b[01]+

FLOAT        ({SIGN}?{UNSIGNED_DECIMAL}\.{UNSIGNED_DECIMAL})|({SIGN}?{UNSIGNED_DECIMAL}(e|E){SIGN}{UNSIGNED_DECIMAL})
WORDNO       {DECIMAL}w

LETTER       [A-Z]|[a-z]
/*GLYPH        [\`\~\!\@\#\$\%\^\&\*\(\)\_\+\-\[\]\{\}\;\\\:\|\,\.\?]*/
/*GLYPH        [\`\~\!\@\$\%\^\&\*\(\)\_\[\]\{\}\\\|\,\.\?]*/
/*CHARACTER    {NUMBER}|{LETTER}|{GLYPH}*/
CHARACTER    {DIGIT}|{LETTER}|\_
/* IDENTIFIER   ({LETTER}|'_'){CHARACTER}* */
IDENTIFIER   ({DIGIT}|{LETTER}|\_|\+|\-|\*|\/|\+|\-|\!|\?|\=|\<|\>)+
WHITESPACE   [\ \t \n \r]
ANYCHARACTER .|\n|\r
/* STUFF        ({CHARACTER}|{WHITESPACE})* */
COMMENT      (\#|\;)[^\n]*\n
/* REGISTER     \%({LETTER}|{DIGIT})+ */
GENERAL_REGISTER     \%r({LETTER}|{DIGIT})+
FP_REGISTER          \%f({LETTER}|{DIGIT})+
CONDITION_REGISTER   \%c({LETTER}|{DIGIT})+
/*STRING       (\"[^\"]*\")|(\'[^\']*\')*/

C_IDENTIFIER ({LETTER}|\_)({DIGIT}|{LETTER}|\_)*
C_GLOBAL     (lib{C_IDENTIFIER}.so)?\${C_IDENTIFIER}

%%

{WHITESPACE}           { /* do nothing */ }
{COMMENT}              { /* do nothing */ }

\(                     { return OPEN; }
\)                     { return CLOSE; }

{GENERAL_REGISTER}     { return GENERAL_REGISTER; }
{FP_REGISTER}          { return FP_REGISTER; }
{CONDITION_REGISTER}   { return CONDITION_REGISTER; }

"uninitialized"        { return UNINITIALIZED; }
"initialized"          { return INITIALIZED; }

"nop"                  { return NOP; }
"mov"                  { return COPY; }

"add"                  { return ADD; }
"sub"                  { return SUB; }
"mul"                  { return MUL; }
"div"                  { return DIV; }
"mod"                  { return MOD; }

"ld"                   { return LOAD; }
"st"                   { return STORE; }
"ldf"                  { return LOAD_FLOAT; }
"stf"                  { return STORE_FLOAT; }

"ldi"                  { return LOAD_IMMEDIATE; }

"ldc"                  { return LOAD_CONDITION; }
"ldic"                 { return LOAD_IMMEDIATE_CONDITION; }
"stc"                  { return STORE_CONDITION; }

"cmp"                  { return COMPARE; }
"be"                   { return BRANCH_ON_EQUAL; }
"bne"                  { return BRANCH_ON_NOT_EQUAL; }
"ble"                  { return BRANCH_ON_LESS_OR_EQUAL; }
"bge"                  { return BRANCH_ON_GREATER_OR_EQUAL; }
"blt"                  { return BRANCH_ON_LESS; }
"bgt"                  { return BRANCH_ON_GREATER; }

"bl"                   { return BRANCH_AND_LINK; }

"b"                    { return BRANCH; }


"movf"                 { return COPY_FLOAT; }
"ldif"                 { return LOAD_IMMEDIATE_FLOAT; }
"cmpf"                 { return COMPARE_FLOAT; }
"addf"                 { return ADD_FLOAT; }
"subf"                 { return SUB_FLOAT; }
"mulf"                 { return MUL_FLOAT; }
"divf"                 { return DIV_FLOAT; }

"dumpr"                { return DUMP_REGISTER; }
"dump"                 { return DUMP; }
"hcf"                  { return HCF; }
"exit"                 { return EXIT; }

CALL-INSTRUCTION-RULES

{C_GLOBAL}             { return C_GLOBAL; }

{BINARY}               { return BINARY_NUMBER; }
{OCTAL}                { return OCTAL_NUMBER; }
{HEXADECIMAL}          { return HEXADECIMAL_NUMBER; }
{UNSIGNED_DECIMAL}     { return UNSIGNED_DECIMAL_NUMBER; }
{DECIMAL}              { return DECIMAL_NUMBER; }
{WORDNO}               { return WORD_NO; }
{FLOAT}                { return FLOAT_NUMBER; }
\+                     { return PLUS; }
\-                     { return MINUS; }
\:                     { return COLON; }
{IDENTIFIER}           { //unescape();
                         return IDENTIFIER; }
.                      { epsilon_fatal("scan error at line %i", svm_lineno); }

%%
